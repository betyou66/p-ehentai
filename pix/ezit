Help on package urllib3:

NNAAMMEE
    urllib3 - Python HTTP library with thread-safe connection pooling, file post support, user friendly, and more

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    _base_connection
    _collections
    _request_methods
    _version
    connection
    connectionpool
    contrib (package)
    exceptions
    fields
    filepost
    poolmanager
    response
    util (package)

CCLLAASSSSEESS
    builtins.object
        urllib3.util.retry.Retry
        urllib3.util.timeout.Timeout
    collections.abc.MutableMapping(collections.abc.Mapping)
        urllib3._collections.HTTPHeaderDict(collections.abc.MutableMapping, typing.Generic)
    io.IOBase(_io._IOBase)
        urllib3.response.BaseHTTPResponse
            urllib3.response.HTTPResponse
    typing.Generic(builtins.object)
        urllib3._collections.HTTPHeaderDict(collections.abc.MutableMapping, typing.Generic)
    urllib3._request_methods.RequestMethods(builtins.object)
        urllib3.connectionpool.HTTPConnectionPool(urllib3.connectionpool.ConnectionPool, urllib3._request_methods.RequestMethods)
            urllib3.connectionpool.HTTPSConnectionPool
        urllib3.poolmanager.PoolManager
            urllib3.poolmanager.ProxyManager
    urllib3.connectionpool.ConnectionPool(builtins.object)
        urllib3.connectionpool.HTTPConnectionPool(urllib3.connectionpool.ConnectionPool, urllib3._request_methods.RequestMethods)
            urllib3.connectionpool.HTTPSConnectionPool
    
    class BBaasseeHHTTTTPPRReessppoonnssee(io.IOBase)
     |  BaseHTTPResponse(*, headers: 'typing.Mapping[str, str] | typing.Mapping[bytes, bytes] | None' = None, status: 'int', version: 'int', reason: 'str | None', decode_content: 'bool', request_url: 'str | None', retries: 'Retry | None' = None) -> 'None'
     |  
     |  Method resolution order:
     |      BaseHTTPResponse
     |      io.IOBase
     |      _io._IOBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *, headers: 'typing.Mapping[str, str] | typing.Mapping[bytes, bytes] | None' = None, status: 'int', version: 'int', reason: 'str | None', decode_content: 'bool', request_url: 'str | None', retries: 'Retry | None' = None) -> 'None'
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cclloossee(self) -> 'None'
     |      Flush and close the IO object.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  ddrraaiinn__ccoonnnn(self) -> 'None'
     |  
     |  ggeett__rreeddiirreecctt__llooccaattiioonn(self) -> 'str | None | Literal[False]'
     |      Should we redirect and where to?
     |      
     |      :returns: Truthy redirect location string if we got a redirect status
     |          code and valid location. ``None`` if redirect status and no
     |          location. ``False`` if not a redirect status code.
     |  
     |  ggeetthheeaaddeerr(self, name: 'str', default: 'str | None' = None) -> 'str | None'
     |  
     |  ggeetthheeaaddeerrss(self) -> 'HTTPHeaderDict'
     |      # Compatibility methods for http.client.HTTPResponse
     |  
     |  ggeettuurrll(self) -> 'str | None'
     |  
     |  iinnffoo(self) -> 'HTTPHeaderDict'
     |      # Compatibility method for http.cookiejar
     |  
     |  jjssoonn(self) -> 'typing.Any'
     |      Parses the body of the HTTP response as JSON.
     |      
     |      To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to the decoder.
     |      
     |      This method can raise either `UnicodeDecodeError` or `json.JSONDecodeError`.
     |      
     |      Read more :ref:`here <json>`.
     |  
     |  rreeaadd(self, amt: 'int | None' = None, decode_content: 'bool | None' = None, cache_content: 'bool' = False) -> 'bytes'
     |  
     |  rreeaadd__cchhuunnkkeedd(self, amt: 'int | None' = None, decode_content: 'bool | None' = None) -> 'typing.Iterator[bytes]'
     |  
     |  rreeaaddiinnttoo(self, b: 'bytearray') -> 'int'
     |      # Compatibility methods for `io` module
     |  
     |  rreelleeaassee__ccoonnnn(self) -> 'None'
     |  
     |  ssttrreeaamm(self, amt: 'int | None' = 65536, decode_content: 'bool | None' = None) -> 'typing.Iterator[bytes]'
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ccoonnnneeccttiioonn
     |  
     |  ddaattaa
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  rreettrriieess
     |  
     |  uurrll
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CCOONNTTEENNTT__DDEECCOODDEERRSS = ['gzip', 'x-gzip', 'deflate']
     |  
     |  DDEECCOODDEERR__EERRRROORR__CCLLAASSSSEESS = (<class 'OSError'>, <class 'zlib.error'>)
     |  
     |  RREEDDIIRREECCTT__SSTTAATTUUSSEESS = [301, 302, 303, 307, 308]
     |  
     |  ____aabbssttrraaccttmmeetthhooddss____ = frozenset()
     |  
     |  ____aannnnoottaattiioonnss____ = {'DECODER_ERROR_CLASSES': 'tuple[type[Exception], .....
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._IOBase:
     |  
     |  ____ddeell____(...)
     |  
     |  ____eenntteerr____(...)
     |  
     |  ____eexxiitt____(...)
     |  
     |  ____iitteerr____(self, /)
     |      Implement iter(self).
     |  
     |  ____nneexxtt____(self, /)
     |      Implement next(self).
     |  
     |  ffiilleennoo(self, /)
     |      Returns underlying file descriptor if one exists.
     |      
     |      OSError is raised if the IO object does not use a file descriptor.
     |  
     |  fflluusshh(self, /)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  iissaattttyy(self, /)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  rreeaaddaabbllee(self, /)
     |      Return whether object was opened for reading.
     |      
     |      If False, read() will raise OSError.
     |  
     |  rreeaaddlliinnee(self, size=-1, /)
     |      Read and return a line from the stream.
     |      
     |      If size is specified, at most size bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  rreeaaddlliinneess(self, hint=-1, /)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  sseeeekk(self, offset, whence=0, /)
     |      Change the stream position to the given byte offset.
     |      
     |        offset
     |          The stream position, relative to 'whence'.
     |        whence
     |          The relative position to seek from.
     |      
     |      The offset is interpreted relative to the position indicated by whence.
     |      Values for whence are:
     |      
     |      * os.SEEK_SET or 0 -- start of stream (the default); offset should be zero or positive
     |      * os.SEEK_CUR or 1 -- current stream position; offset may be negative
     |      * os.SEEK_END or 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  sseeeekkaabbllee(self, /)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise OSError.
     |      This method may need to do a test seek().
     |  
     |  tteellll(self, /)
     |      Return current stream position.
     |  
     |  ttrruunnccaattee(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  wwrriittaabbllee(self, /)
     |      Return whether object was opened for writing.
     |      
     |      If False, write() will raise OSError.
     |  
     |  wwrriitteelliinneess(self, lines, /)
     |      Write a list of lines to stream.
     |      
     |      Line separators are not added, so it is usual for each of the
     |      lines provided to have a line separator at the end.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from _io._IOBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._IOBase:
     |  
     |  ____ddiicctt____
     |  
     |  cclloosseedd
    
    class HHTTTTPPCCoonnnneeccttiioonnPPooooll(ConnectionPool, urllib3._request_methods.RequestMethods)
     |  HTTPConnectionPool(host: 'str', port: 'int | None' = None, timeout: '_TYPE_TIMEOUT | None' = <_TYPE_DEFAULT.token: -1>, maxsize: 'int' = 1, block: 'bool' = False, headers: 'typing.Mapping[str, str] | None' = None, retries: 'Retry | bool | int | None' = None, _proxy: 'Url | None' = None, _proxy_headers: 'typing.Mapping[str, str] | None' = None, _proxy_config: 'ProxyConfig | None' = None, **conn_kw: 'typing.Any')
     |  
     |  Thread-safe connection pool for one host.
     |  
     |  :param host:
     |      Host used for this HTTP Connection (e.g. "localhost"), passed into
     |      :class:`http.client.HTTPConnection`.
     |  
     |  :param port:
     |      Port used for this HTTP Connection (None is equivalent to 80), passed
     |      into :class:`http.client.HTTPConnection`.
     |  
     |  :param timeout:
     |      Socket timeout in seconds for each individual connection. This can
     |      be a float or integer, which sets the timeout for the HTTP request,
     |      or an instance of :class:`urllib3.util.Timeout` which gives you more
     |      fine-grained control over request timeouts. After the constructor has
     |      been parsed, this is always a `urllib3.util.Timeout` object.
     |  
     |  :param maxsize:
     |      Number of connections to save that can be reused. More than 1 is useful
     |      in multithreaded situations. If ``block`` is set to False, more
     |      connections will be created but they will not be saved once they've
     |      been used.
     |  
     |  :param block:
     |      If set to True, no more than ``maxsize`` connections will be used at
     |      a time. When no free connections are available, the call will block
     |      until a connection has been released. This is a useful side effect for
     |      particular multithreaded situations where one does not want to use more
     |      than maxsize connections per host to prevent flooding.
     |  
     |  :param headers:
     |      Headers to include with all requests, unless other headers are given
     |      explicitly.
     |  
     |  :param retries:
     |      Retry configuration to use by default with requests in this pool.
     |  
     |  :param _proxy:
     |      Parsed proxy URL, should not be used directly, instead, see
     |      :class:`urllib3.ProxyManager`
     |  
     |  :param _proxy_headers:
     |      A dictionary with proxy headers, should not be used directly,
     |      instead, see :class:`urllib3.ProxyManager`
     |  
     |  :param \**conn_kw:
     |      Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
     |      :class:`urllib3.connection.HTTPSConnection` instances.
     |  
     |  Method resolution order:
     |      HTTPConnectionPool
     |      ConnectionPool
     |      urllib3._request_methods.RequestMethods
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, host: 'str', port: 'int | None' = None, timeout: '_TYPE_TIMEOUT | None' = <_TYPE_DEFAULT.token: -1>, maxsize: 'int' = 1, block: 'bool' = False, headers: 'typing.Mapping[str, str] | None' = None, retries: 'Retry | bool | int | None' = None, _proxy: 'Url | None' = None, _proxy_headers: 'typing.Mapping[str, str] | None' = None, _proxy_config: 'ProxyConfig | None' = None, **conn_kw: 'typing.Any')
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cclloossee(self) -> 'None'
     |      Close all pooled connections and disable the pool.
     |  
     |  iiss__ssaammee__hhoosstt(self, url: 'str') -> 'bool'
     |      Check if the given ``url`` is a member of the same host as this
     |      connection pool.
     |  
     |  uurrllooppeenn(self, method: 'str', url: 'str', body: '_TYPE_BODY | None' = None, headers: 'typing.Mapping[str, str] | None' = None, retries: 'Retry | bool | int | None' = None, redirect: 'bool' = True, assert_same_host: 'bool' = True, timeout: '_TYPE_TIMEOUT' = <_TYPE_DEFAULT.token: -1>, pool_timeout: 'int | None' = None, release_conn: 'bool | None' = None, chunked: 'bool' = False, body_pos: '_TYPE_BODY_POSITION | None' = None, preload_content: 'bool' = True, decode_content: 'bool' = True, **response_kw: 'typing.Any') -> 'BaseHTTPResponse'
     |      Get a connection from the pool and perform an HTTP request. This is the
     |      lowest level call for making a request, so you'll need to specify all
     |      the raw details.
     |      
     |      .. note::
     |      
     |         More commonly, it's appropriate to use a convenience method
     |         such as :meth:`request`.
     |      
     |      .. note::
     |      
     |         `release_conn` will only behave as expected if
     |         `preload_content=False` because we want to make
     |         `preload_content=False` the default behaviour someday soon without
     |         breaking backwards compatibility.
     |      
     |      :param method:
     |          HTTP request method (such as GET, POST, PUT, etc.)
     |      
     |      :param url:
     |          The URL to perform the request on.
     |      
     |      :param body:
     |          Data to send in the request body, either :class:`str`, :class:`bytes`,
     |          an iterable of :class:`str`/:class:`bytes`, or a file-like object.
     |      
     |      :param headers:
     |          Dictionary of custom headers to send, such as User-Agent,
     |          If-None-Match, etc. If None, pool headers are used. If provided,
     |          these headers completely replace any pool-specific headers.
     |      
     |      :param retries:
     |          Configure the number of retries to allow before raising a
     |          :class:`~urllib3.exceptions.MaxRetryError` exception.
     |      
     |          Pass ``None`` to retry until you receive a response. Pass a
     |          :class:`~urllib3.util.retry.Retry` object for fine-grained control
     |          over different types of retries.
     |          Pass an integer number to retry connection errors that many times,
     |          but no other types of errors. Pass zero to never retry.
     |      
     |          If ``False``, then retries are disabled and any exception is raised
     |          immediately. Also, instead of raising a MaxRetryError on redirects,
     |          the redirect response will be returned.
     |      
     |      :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
     |      
     |      :param redirec