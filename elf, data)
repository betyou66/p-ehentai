Help on _SSLProtocolTransport in module asyncio.sslproto object:

class __SSSSLLPPrroottooccoollTTrraannssppoorrtt(asyncio.transports._FlowControlMixin, asyncio.transports.Transport)
 |  _SSLProtocolTransport(loop, ssl_protocol)
 |  
 |  Method resolution order:
 |      _SSLProtocolTransport
 |      asyncio.transports._FlowControlMixin
 |      asyncio.transports.Transport
 |      asyncio.transports.ReadTransport
 |      asyncio.transports.WriteTransport
 |      asyncio.transports.BaseTransport
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ____ddeell____(self, _warnings=<module 'warnings' from '/usr/lib/python3.11/warnings.py'>)
 |  
 |  ____iinniitt____(self, loop, ssl_protocol)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  aabboorrtt(self)
 |      Close the transport immediately.
 |      
 |      Buffered data will be lost.  No more data will be received.
 |      The protocol's connection_lost() method will (eventually) be
 |      called with None as its argument.
 |  
 |  ccaann__wwrriittee__eeooff(self)
 |      Return True if this transport supports write_eof(), False if not.
 |  
 |  cclloossee(self)
 |      Close the transport.
 |      
 |      Buffered data will be flushed asynchronously.  No more data
 |      will be received.  After all buffered data is flushed, the
 |      protocol's connection_lost() method will (eventually) called
 |      with None as its argument.
 |  
 |  ggeett__eexxttrraa__iinnffoo(self, name, default=None)
 |      Get optional transport information.
 |  
 |  ggeett__pprroottooccooll(self)
 |      Return the current protocol.
 |  
 |  ggeett__rreeaadd__bbuuffffeerr__lliimmiittss(self)
 |  
 |  ggeett__rreeaadd__bbuuffffeerr__ssiizzee(self)
 |      Return the current size of the read buffer.
 |  
 |  ggeett__wwrriittee__bbuuffffeerr__lliimmiittss(self)
 |      Get the high and low watermarks for write flow control.
 |      Return a tuple (low, high) where low and high are
 |      positive number of bytes.
 |  
 |  ggeett__wwrriittee__bbuuffffeerr__ssiizzee(self)
 |      Return the current size of the write buffers.
 |  
 |  iiss__cclloossiinngg(self)
 |      Return True if the transport is closing or closed.
 |  
 |  iiss__rreeaaddiinngg(self)
 |      Return True if the transport is receiving.
 |  
 |  ppaauussee__rreeaaddiinngg(self)
 |      Pause the receiving end.
 |      
 |      No data will be passed to the protocol's data_received()
 |      method until resume_reading() is called.
 |  
 |  rreessuummee__rreeaaddiinngg(self)
 |      Resume the receiving end.
 |      
 |      Data received will once again be passed to the protocol's
 |      data_received() method.
 |  
 |  sseett__pprroottooccooll(self, protocol)
 |      Set a new protocol.
 |  
 |  sseett__rreeaadd__bbuuffffeerr__lliimmiittss(self, high=None, low=None)
 |      Set the high- and low-water limits for read flow control.
 |      
 |      These two values control when to call the upstream transport's
 |      pause_reading() and resume_reading() methods.  If specified,
 |      the low-water limit must be less than or equal to the
 |      high-water limit.  Neither value can be negative.
 |      
 |      The defaults are implementation-specific.  If only the
 |      high-water limit is given, the low-water limit defaults to an
 |      implementation-specific value less than or equal to the
 |      high-water limit.  Setting high to zero forces low to zero as
 |      well, and causes pause_reading() to be called whenever the
 |      buffer becomes non-empty.  Setting low to zero causes
 |      resume_reading() to be called only once the buffer is empty.
 |      Use of zero for either limit is generally sub-optimal as it
 |      reduces opportunities for doing I/O and computation
 |      concurrently.
 |  
 |  sseett__wwrriittee__bbuuffffeerr__lliimmiittss(self, high=None, low=None)
 |      Set the high- and low-water limits for write flow control.
 |      
 |      These two values control when to call the protocol's
 |      pause_writing() and resume_writing() methods.  If specified,
 |      the low-water limit must be less than or equal to the
 |      high-water limit.  Neither value can be negative.
 |      
 |      The defaults are implementation-specific.  If only the
 |      high-water limit is given, the low-water limit defaults to an
 |      implementation-specific value less than or equal to the
 |      high-water limit.  Setting high to zero forces low to zero as
 |      well, and causes pause_writing() to be called whenever the
 |      buffer becomes non-empty.  Setting low to zero causes
 |      resume_writing() to be called only once the buffer is empty.
 |      Use of zero for either limit is generally sub-optimal as it
 |      reduces opportunities for doing I/O and computation
 |      concurrently.
 |  
 |  wwrriittee(self, data)
 |      Write some data bytes to the transport.
 |      
 |      This does not block; it buffers the data and arranges for it
 |      to be sent out asynchronously.
 |  
 |  wwrriittee__eeooff(self)
 |      Close the write end after flushing buffered data.
 |      
 |      This raises :exc:`NotImplementedError` right now.
 |  
 |  wwrriitteelliinneess(self, list_of_data)
 |      Write a list (or any iterable) of data bytes to the transport.
 |      
 |      The default implementation concatenates the arguments and
 |      calls write() on the result.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object
